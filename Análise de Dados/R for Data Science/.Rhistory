![alt text here](imagens/capa_livro.png)
# Pacote importantes para o livro
install.packages("data.table")
# Pacote importantes para o livro
install.packages("data.table")
```
# Para atualizado
tidyverse_update()
# Complementam o tidyverse
install.packages(c("nycflights13", "gapminder", "Lahman"))
# Ver as mensagens de erro em inglês
Sys.setenv(LANGUAGE = "en")
library(tidyverse)
# Base de dados usado
install.packages("data.table")
# ggplot2, tibble, tidyr, readr, purrr and dplyr.
install.packages("tidyverse")
library(tidyverse)
# Complementam o tidyverse
install.packages(c("nycflights13", "gapminder", "Lahman"))
# Ver as mensagens de erro em inglês
Sys.setenv(LANGUAGE = "en")
require(actuar)
if (require(actuar) == FALSE){install.packages("actuar")}else {library(actuar)}
if (require(actuar) == FALSE){install.packages("actuar")}else {library(actuar)}
detach("package:actuar", unload = TRUE)
library(actuar)
detach("package:actuar", unload = TRUE)
remove.packages("actuar", lib="~/R/win-library/4.1")
remove.packages("zoo", lib="~/R/win-library/4.1")
pacotes = c("actuar","zoo")
if (require(pacotes) == FALSE){install.packages(pacotes)}else {library(pacotes)}
pacotes = c("actuar","zoo")
if (require(pacotes) == FALSE){install.packages(pacotes)}else {library(pacotes)}
remove.packages("actuar", lib="~/R/win-library/4.1")
pacotes = c("actuar","zoo")
if (require(pacotes) == FALSE){install.packages(pacotes) library(pacotes)}else {library(pacotes)}
pacotes = c("actuar","zoo")
if (require(pacotes) == FALSE){install.packages(pacotes) library(pacotes)}else {library(pacotes)}
if (require(pacotes) == FALSE) {
install.packages(pacotes)
library(pacotes)
} else {
library(pacotes)
}
install.packages(pacotes)
if (require(pacotes) == FALSE) {
install.packages(pacotes)
library(pacotes)
} else {
library(pacotes)
}
require(pacotes)
require(pacotes) == TRUE
require(pacotes) == FALSE
if (require(pacotes) == TRUE) {
install.packages(pacotes)
library(pacotes)
} else {
library(pacotes)
}
if (require(pacotes) == TRUE) {
install.packages(pacotes)
library(pacotes)
} else {
library(pacotes)
}
library(pacote)
library("pacote")
library(pacote[1])
pacotes[1]
pacotes[2]
for (i in pacotes) {
if (require(pacotes) == TRUE) {
install.packages(pacotes)
library(pacotes[i])
} else {
library(pacotes[i])
}
}
for (i in pacotes) {
if (require(pacotes) == TRUE) {
install.packages(pacotes)
library(pacotes[i])
} else {
library(pacotes[i])
}
}
pacotes[1]
for (i in pacotes) {
print(i)
}
library("zoo")
detach("package:zoo", unload = TRUE)
for (i in pacotes) {
print(i)
library(i)
}
for (i in lenght(pacotes)) {
print(i)
library(i)
}
for (i in length(pacotes)) {
print(i)
library(i)
}
for (i in length(pacotes)) {
print(i)
library(pacotes[i])
}
# Banco de dados
ggplot2::mpg
mpg
# Banco de dados
mpg <- ggplot2::mpg
# Base de dados usado
#install.packages("data.table")
# ggplot2, tibble, tidyr, readr, purrr and dplyr.
#install.packages("tidyverse")
library(tidyverse)
# Complementam o tidyverse
#install.packages(c("nycflights13", "gapminder", "Lahman"))
# Ver as mensagens de erro em inglês
Sys.setenv(LANGUAGE = "en")
ggplot(data = mpg) +
geom_point(mapping =  aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))
# Left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# Right
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
# Left
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# Right
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "red")
![Formas dos pontos](imagens/formas_pontos.png)
